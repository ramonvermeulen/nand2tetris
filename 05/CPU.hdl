// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A-Register
	Mux16(a=instruction, b=outAlu, sel=instruction[15], out=outAMux);
    Mux(a=true, b=instruction[5], sel=instruction[15], out=loadAReg);
    ARegister(in=outAMux, load=loadAReg, out=AReg, out[0..14]=addressM);

    // D-Register
    Mux(a=false, b=instruction[4], sel=instruction[15], out=loadDReg);
    DRegister(in=outAlu, load=loadDReg, out=DReg);

    // ALU
    Mux16(a=AReg, b=inM, sel=instruction[12], out=ARegMux);
	ALU(x=DReg, y=ARegMux, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outAlu, out=outM, zr=outZr, ng=outNg);
    // A or C instruction
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);
   
    Not(in=outNg, out=notNG);
    Or(a=outZr, b=notNG, out=ZRornotNG);
    Not(in=outZr, out=notZR);
    Or(a=outZr, b=outNg, out=ZRorNG);
    And(a=notNG, b=notZR, out=notNGandnotZR);
    Mux8Way16(a=false, b[0]=notNGandnotZR, c[0]=outZr, d[0]=ZRornotNG, e[0]=outNg, f[0]=notZR, g[0]=ZRorNG, h=true, sel=instruction[0..2], out[0]=outJMP);

    //PC
    Mux(a=false, b=outJMP, sel=instruction[15], out=finalOutJMP);
    PC(in=AReg, load=finalOutJMP, inc=true, reset=reset, out[0..14]=pc);
}
